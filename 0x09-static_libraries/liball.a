!<arch>
0-isupper.c/    0           0     0     644     238       `
#include <ctype.h>

/**
 * _isupper - checks for uppercase character
 * @c: the character to be checked
 *
 * Return: 1 in case of c is uppercase, 0 otherwise
 */
int _isupper(int c)
{
	if (isupper(c))
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     447       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 * @s: the memory area to be filled
 * @b: the constant byte
 * @n: the number of bytes to be filled in s
 *
 * Description: fills the first n bytes of the memory area
 *		pointed to by s with the constant byte b
 * Return: pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	char *i;

	for (i = s; i < s + n; i++)
	{
		*i = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     559       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @src: string to be appended to dest
 * @dest: the string we will append src to it
 *
 * Description: appends the src string to the dest string,
 *	overwriting the terminating null byte (\0) at the end of dest,
 *	and then adds a terminating null byte
 *
 * Return: pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
	char *ptr = dest;

	while (*ptr != '\0')
	{
		ptr++;
	}
	while (*src != '\0')
	{
		*ptr = *src;
		ptr++;
		src++;
	}
	*ptr = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     422       `
#include "main.h"
#include <stdlib.h>

/**
 * _atoi - converts a string to an integer
 * @s: the string to be converted
 *
 * Return: the string as an integer
 */
int _atoi(char *s)
{
	unsigned int result = 0;
	int sign = 1;

	do {
		if (*s == '-')
			sign = sign * -1;
		else if (*s >= '0' && *s <= '9')
			result = (result * 10) + (*s - '0');
		else if (result > 0)
			break;
	} while (*s++);
	return (sign * result);
}
1-isdigit.c/    0           0     0     644     234       `
#include <ctype.h>

/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: the digit to be checked
 *
 * Return: 1 in case of c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
	if (isdigit(c))
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     452       `
#include "main.h"

/**
 * _memcpy - copies memory area
 * @dest: the memory area where we copy the bytes
 * @src: the memory area where we copy from the bytes
 * @n: the number of bytes to be copied
 *
 * Description: copies n bytes from memory area src to memory area dest
 *
 * Return: a pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     644       `
#include "main.h"

/**
 * _strncat - concatenates two strings
 * @src: the string to be appended to dest
 * @dest: the string that src will be appended to it
 * @n: number of bytes to be added to dest from src
 *
 * Description: similar to _strcat, except:
 *	it will use at most n bytes from src; and
 *	src does not need to be null-terminated if it contains n or more bytes
 *
 * Return: pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	char *ptr = dest;

	while (*ptr != '\0')
	{
		ptr++;
	}
	while (*src != '\0' && n > 0)
	{
		*ptr = *src;
		ptr++;
		src++;
		n--;
	}
	*ptr = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     412       `
#include "main.h"

/**
 * _strchr - locates a character in a string
 * @s: the string
 * @c: the character to be located
 *
 * Return: a pointer to the first occurrence of the character c in the string s
 *		or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{
	unsigned int i = 0;

	while (s[i] != c && s[i] != '\0')
	{
		i++;
	}
	if (s[i] == c)
		return (s + i);
	else
		return (NULL);
}
2-strlen.c/     0           0     0     644     242       `
#include "main.h"
#include <string.h>

/**
 * _strlen - return the length of a string
 * @s: the string that should get its length
 *
 * Return: length of s
 */
int _strlen(char *s)
{
	size_t length;

	length = strlen(s);
	return (length);
}
2-strncpy.c/    0           0     0     644     472       `
#include "main.h"

/**
 * _strncpy - copies the string pointed to by src, to dest
 * @dest: destination of the copied string
 * @src: source from which string is copied
 * @n: the number of bytes to be copied from src
 *
 * Return: pointer to dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	char *ptr = dest;
	int i = 0;

	while (*src != '\0' && i < n)
	{
		*ptr = *src;
		ptr++;
		src++;
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     237       `
#include "main.h"
#include <ctype.h>

/**
 * _islower - cheks for lowercase character
 * @c: character to be checked
 *
 * Return: on success 1, otherwise 0
 */

int _islower(int c)
{
	if (islower(c))
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     256       `
#include "main.h"
#include <string.h>

/**
 * _puts - prints a string followed by a new line, to stdout
 * @str: the string to be printed
 */
void _puts(char *str)
{
	size_t i = 0;

	for (i = 0; i < strlen(str); i++)
		_putchar(str[i]);
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     379       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: string 1
 * @s2: string 2 to be compared with s1
 *
 * Return: 0, if s1 and s2 are equal
 *		a -ve value if s1 is less than s2
 *		a +ve value if s1 is greater than s2
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && (*s1 == *s2))
	{
		s1++;
		s2++;
	}
	return (*(unsigned char *)s1 - *(unsigned char *)s2);
}

3-strspn.c/     0           0     0     644     600       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: the string to be scanned
 * @accept: string containing the characters to match
 *
 * Description: calculates the length of the initial segment of s
 *		which consists entirely of bytes in accept
 *
 * Return: number of bytes in the initial segment of s which
 *		consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != s[i]; j++)
		{
			if (accept[j] == '\0')
			{
				return (i);
			}
		}
	}
	return (i);
}
4-isalpha.c/    0           0     0     644     225       `
#include <ctype.h>

/**
 * _isalpha - checks for alphabetic character
 * @c: The character to be checked
 *
 * Return: on success 1, otherwise 0
 */

int _isalpha(int c)
{
	if (isalpha(c))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     592       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: the string to be scanned
 * @accept: the bytes to match
 *
 * Description: locates the first occurrence in the string s
 *		of any of the bytes in the string accept
 *
 * Return: pointer to the byte in s that matches one of the bytes in accept
 *		or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (accept[j] == s[i])
			{
				return (s + i);
			}
		}
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     532       `
#include "main.h"
#include <string.h>

/**
 * _strstr - locates a substring
 * @haystack: the string
 * @needle: the substring
 *
 * Description: finds the first occurrence of the substring
 *		needle in the string haystack
 *
 * Return: pointer to the beginning of the located substring
 *		or NULL if the substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
	size_t n = strlen(needle);

	while (*haystack)
	{
		if (!memcmp(haystack, needle, n))
		{
			return (haystack);
		}
		haystack++;
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     203       `
#include <stdlib.h>

/**
 * _abs - computes the absolute value of an integer
 * @n: The integer to get its absolute value
 *
 * Return: The absolute value of n
 */

int _abs(int n)
{
	return (abs(n));
}

9-strcpy.c/     0           0     0     644     336       `
#include "main.h"
#include <string.h>

/**
 * _strcpy - copies the string pointed to by src,
 *		to buffer pointed to by dest
 * @dest: destination of the copied string
 * @src: source from which string is copied
 *
 * Return: pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	char *x;

	x = strcpy(dest, src);
	return (x);
}
_putchar.c/     0           0     0     644     196       `
#include <unistd.h>
#include "main.h"

/**
 * _putchar - writes c
 * @c: The character to print
 *
 * Return: on success 1
 *		on error -1
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}
